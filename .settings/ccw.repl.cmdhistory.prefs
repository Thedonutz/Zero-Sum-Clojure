cmdhistory=["3" "(+ 1 2 3)" "42" "6.022e34" "/e" "\\\\e" "nil" "null" "(use 'clojure.repl)" "(doc when)" "3" "(fn [message] (print message))" "((fn [message] (print message)) \\"Hello Clojure\\")" "3" "(max 4 6 5 3)" "(max 4 5 7 (min  9 9 8 9))" "5" "k" "4" "\\"hi\\"" "hi" "\\"hi\\"" "hi" "\\"yo\\"" "(get-input yes)" "(get-input)" "(get-input [\\"pl\\"])" "okay" "\\"okay\\"" "10.txt" "(read-lines 10.txt)" "(read-lines 10\\n            )" "(prompt)" "(prompt me)" "(prompt [fun])" "(play)" "play" "(play [])" "(foo hi)" "(foo \\"ho\\")" "(foo 1)" "(make-gameList [read-lines])" "(make-gameList (read-lines))" "lein urn" "lein run" "3" "-main" "(-main\\n  )" "(-main)" "-main" "(-main 1)" "(read-lines)" "(getPath\\n  )" "(read-lines)" "(make-gameList (read-lines))" "(make-gameList read-lines)" "(make-gameList \\"resources/10.txt\\")" "(make-gameList \\"read-lines\\")" "(make-gameList \\"10 5 4 2 3 5 8 2 3 5 1\\")" "(read-lines)" "(get-lines \\"10.txt\\")" "(get-lines 10.txt)" "(read-lines)" "(read-lines 10.txt)" "(read-lines \\"10.txt\\")" "(read-lines)" "(readlines)" "(readlines2)" "(readlines3)" "(read-lines)" "(readlines2)" "(read-lines)" "(readlines2)" "(read-lines)" "x" "'x" "(swap\! x + 1)" "(swap\! x + 9)" "def y 15" "(def y 15)" "y" "(swap\! x + y)" "(easier)" "(type easier)" "(type [\\" 10 95 61\\"])" "(nth [\\"10 95 5\\"] 0)" "(get [\\"1 2 3 4\\"] 1)" "(get [\\"1 2 3 4\\"] 2)" "(pop [\\"1 2 3 4\\"])" "(read-lines)" "(get (read-lines) 0)" "(read-lines)" "(get (read-lines) 1)" "(first (read-lines))" "(first(first(read-lines)))" "(println (read-lines))" "(nth [read-lines] 0)" "(nth (read-lines) 0)" "(ffirst (read-lines))" "(map read-string [\\"1\\" \\"2\\"])" "(print (readlines))" "(map read-string [\\"1 2 3\\"])" "(read-lines)" "(println (read-lines))" "(read-lines)" "(first (read-lines))" "(read-lines)" "(str-2-int (read-lines))" "(read-lines)" "(apply str-2-int (read-lines))" "(first (apply str-2-int (read-lines)))" "(getSize)" "getSize" "(getSize)" "(convertRead)" "(rest (convertRead))" "(getWorkingReverseList)" "(getWorkingList)" "(choice1 (10 5 4 2 5))" "(choice1 [(4 3 2 5 2 6)])" "(+ 4 (min 4 6))" "(choice1 (5 3 2 3 4 6))" "(choice1 [4 3 23 5 24 4])" "(choice1 [( 1 2 3 4 5 6)])" "(choice1 readlines)" "(choice1 3 4 5 6 4)" "(choice1 '(3 43 3 2 4))" "(choice1 (3 4  5 6 7 4 3 3))" "(choice (1 2 3 4 5))" "(def v (1 2 3 4 5 6))" "v" "'v" "(doc first)" "(doc map)" "(+ 1 2)" "(doc doc)" "(choice (1 2 3 4 5))" "(doc doc)" "(choice (1 2 3 4))" "(doc list)" "(defn abc ([& list]\\n            println(+ list)))" "(abc (1 2 3 ))" "(abc '(1 2 3))" "(defn abc([& list]\\n           (println(first(list)))))" "(abc (1 2 3 4))" "(abc '(1 2 3 4 5))" "(abc (list 1 3 4 5))" "(defn ab [x]\\n  (println (first (x))))" "(ab (list (1 2 3 4)))" "(ab (list '(1 2 4 5)))" "(ab 1 2 3 4 5 6)" "(apply ab[1  2 4 5])" "(defn ab [list& x]\\n  (+ x))" "(defn ab [list & x]\\n  (println (+ x)))" "(defn abc [& x]\\n  (println (+ x)))" "(abc (1 2 3 4 5)\\n     )" "(abc '(1 2 3 4 5))" "(defn adding [aList]\\n  (println(+ aList)))" "(adding [1 2 3 4 5])" "(type (getWorkingList))" "(type getWorkingList)" "(getWorkingList)" "(doc doc)" "(read-lines)" "(getWorkingList)" "(type getWorkingList)" "(type 'getWorkingList)" "(type (getWorkingList))" "(defn ab [x]\\n  (println (+ x)))" "(ab (1 2 3))" "(ab '(1 2 3))" "(defn ab [&x]\\n  (println (+ x)))" "(ab (1 2 3))" "(ab 1 2)" "(ab )" "(ab 1)" "(+ 1 1)" "(+ x x)" "(def x 1)" "(+ x x)" "(defn choice (\\n               [& x]\\n  (+ (first (x)) (min(first(rest(x))), (first(rest(reverse(x)))),\\n                                           (first(rest(rest(x))))\\n                                           (first(reverse(x)))))))" "(choice ( 1 2 3))" "(choice 1 2 3)" "(choice '(1 2 3))" "(first getWorkingList)" "(first (getWorkingList))" "(defn choice\\n               [& x]\\n  (+ (first (x)) (min(first(rest(x))), (first(rest(reverse(x)))),\\n                                           (first(rest(rest(x))))\\n                                           (first(reverse(x))))))" "(choice (1 2 3))" "(defn choice\\n               [& x]\\n  (+ (first (x)) (min(first(rest(x))), (first(rest(reverse(x)))),\\n                                           (first(rest(rest(x))))\\n                                           (first(reverse(x))))))" "(choice (1 2 3))" "(choice '(1 2 3))" "(choice 1 2 3)" "(println (1 2 3 4 5))" "(print (1 2 3 4))" "(getWorkingList)" "(apply choice (1 2 3))" "(apply (choice 1 2 3))" "(apply (choice '(1 2 3))\\n       )" "(defn choice\\n               [& x]\\n  (apply + (first (x)) (min(first(rest(x))), (first(rest(reverse(x)))),\\n                                           (first(rest(rest(x))))\\n                                           (first(reverse(x))))))" "(choice (1 2 3))" "(choice '(1 2 3))" "(max (1 2 3))" "(max 1 2 3)" "(max '(1 2 3))" "(getWorkingList)" "(type (getWorkingList))" "(read-lines)" "(type (read-lines))" "(max [1 2 3 4])" "(max '[1 2 3 4])" "(getWorkingList)" "(defn ab []\\n  (println (getWorkingList)))" "ab" "(ab)" "(def x (1 2 3)\\n  )" "(def x '(1 2 3))" "x" "(defn choice [& x]\\n  (+ (first (x)) (min (first(rest(x))), (first(rest(reverse(x)))),\\n                                     (first(rest(rest(x))))\\n                                     (first(reverse(x))))))" "(choice x)" "(choice 1 2 3 4)" "(first(x))" "(first x)" "(min (first(rest x)))" "(first(rest(reverse x)))" "(first(rest(rest(x))))" "(first(rest(rest x)))" "(def x '(1 2 3 4 5 6))" "x" "(+ (first x) (min (first(rest x))))" "(choice x)" "(choice (x))" "(choice (1 2 3 4))" "(choice '(1 2 3 4 4))" "(choice 1 2 3 4)" "(choice (getWorkingList))" "(choice 1 2)" "(choice 1 2 4 5 6 7 8)" "(choice getWorkingList)" "(choice (getWorkingList))" "(choice x)" "(def x '(1 2 3 4 5 6 7 8 9 10 11))" "x" "(choice x)" "(choice (x))" "(choice '(x))" "(choice 'x)" "(defn choice [x]\\n  (+ (first x) (min (first(rest x ))), (first(rest(reverse x))),\\n                                   (first(rest(rest x)))\\n                                   (first(reverse x))))" "(choice (1 2 3))" "(choice '(1 2 3 4 5))" "(choice '(1 2 3))" "x" "(min (first( rest x)), (first(rest(reverse x))), (first(rest(rest x))), (first(reverse x)))" "(defn choice [x]\\n  (+ (first x) (min (first( rest x)), (first(rest(reverse x))), \\n                    (first(rest(rest x))), (first(reverse x)))))" "(choice '(1 2 3 4 5))" "(choice '(1 2 3 4 5 6 7))" "(defn choice [x]\\n  (+ (first x) (min (first( rest x)), (first(rest(reverse x))), \\n                    (first(rest(rest x))), (first(reverse x)))))" "(choice '(1 2 3 4 5 6 7))" "(choice '(getWorkingList))" "(choice (getWorkingList))" "x" "(def z 55)" "z" "(def z '( 1 2 3 4 5))" "z" "(last z)" "(choice (getWorkingList))" "(choice (getWorkingReverseList))" "x" "(def x '(1 2 3 4 5))" "x" "(+ (first x) (first x))" "(last (last x))" "(last x)" "(last (butlast x))" "(last (butlast (butlast x)))" "(defn altChoice [x]\\n  (+ (last x) (min (first x), (last (butlast (butlast x)), \\n                                    (first (rest x)), (last (butlast x))))))" "(altChoice (getWorkingList))" "(defn altChoice [x]\\n  (+ (last x) (min (first x), (last (butlast (butlast x))), \\n                                    (first (rest x)), (last (butlast x)))))" "(altChoice (getWorkingList))" "(mainAlg (getWorkingList))" "(def x '(1 2))" "(choice x)" "(choice (x))" "(def y '(1 2 3 4 5))" "(choice y)" "(def y '(1 2 3 4))" "(choice y)" "(def y ('1 2 3))" "(def y '(1 2 3))" "(choice y)" "(def y '(1 2))" "(choice y)" "(def y '(1 2 3))" "(def x '(1 2))" "(mainAlg y)" "(defn mainAlg [x]\\n  (if (>\= count '(x)\\n          ) (max (first x), (last x)) (max (choice x) (altChoice x))))" "(mainAlg y)" "(def y '(1 2 3))" "(def x '(1 2))" "(mainAlg y)" "(mainAlg x)" "(mainAlg (getWorkingList))" "(choice (getWorkingList))" "(mainAlg (getWorkingList))" "(def y '(1 2 3))" "(mainAlg y)" "(mainAlg (getWorkingList))" "(choice (getWorkingList))" "(altChoice (getWorkingList))" "(defn mainAlg [x]\\n  (cond\\n    (>\= (count (x)) 2) (max (first x), (last x)) \\n    true (max (choice x) (altChoice x))))" "(mainAlg (getWorkingList))" "(defn mainAlg [x]\\n  (cond\\n    (>\= (count 'x\\n               ) 2) (max (first x), (last x)) \\n    true (max (choice x) (altChoice x))))" "(mainAlg (getWorkingList))" "(def size 6)" "size" "(\= (mod (size 2) 0))" "(mod (size 2) 0)" "(mod size 2)" "(mainProg (getWorkingList))" "(listReturned (getWorkingList))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [player1 0 player2 0]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x) (swap\! player1 + (mainAlg x)))\\n    (\= (mod size 2) 1)    (recur (listReturned x) (swap\! player2 + (mainAlg x)))\\n    true (recur (listReturned x) (dec size))))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [player1 (atom 0) player2 (atom 0)]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x) (swap\! player1 + (mainAlg x)))\\n    (\= (mod size 2) 1)    (recur (listReturned x) (swap\! player2 + (mainAlg x)))\\n    true (recur (listReturned x) (dec size))))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize), player1 0, player2 0]\\n(loop [x, player1, player2, size]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x), (+ player1 (mainAlg x)), player2, (dec size))\\n    (\= (mod size 2) 1)    (recur (listReturned x), player1, (+ player2 (mainAlg x)), (dec size))\\n    true (recur (listReturned x), player1, player2, (dec size))))))" "(defn mainProg [x]\\n  (let [size (getSize), player1 0, player2 0]\\n(loop [player1, player2]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x), (+ player1 (mainAlg x)), player2, (dec size))\\n    (\= (mod size 2) 1)    (recur (listReturned x), player1, (+ player2 (mainAlg x)), (dec size))\\n    true (recur (listReturned x), player1, player2, (dec size))))))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [player1 0, player2 0]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x) (+ player1 (mainAlg x)) player2 (dec size))\\n    (\= (mod size 2) 1)    (recur (listReturned x) player1 (+ player2 (mainAlg x)) (dec size))\\n    true (recur (listReturned x), player1, player2, (dec size))))))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [player1, player2]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned x) (+ player1 (mainAlg x)) player2 (dec size))\\n    (\= (mod size 2) 1)    (recur (listReturned x) player1 (+ player2 (mainAlg x)) (dec size))\\n    true (recur (listReturned x), player1, player2, (dec size))))))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [l x , player1 0,  player2 0, s size]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned l) (+ player1 (mainAlg x)) player2 (dec s))\\n    (\= (mod size 2) 1)    (recur (listReturned l) player1 (+ player2 (mainAlg x)) (dec s))\\n    true (recur (listReturned l), player1, player2, (dec s))))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [ x , player1 0,  player2 0, size]\\n  (cond\\n    (\= size 0) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod size 2) 0)    (recur (listReturned l) (+ player1 (mainAlg x)) player2 (dec s))\\n    (\= (mod size 2) 1)    (recur (listReturned l) player1 (+ player2 (mainAlg x)) (dec s))\\n    true (recur (listReturned l), player1, player2, (dec s))))))" "(mainProg (getWorkingList))" "(\= (mod 2 2) 0)" "(\= 3 0)" "(def size 3)" "(\= (mod size) 0)" "(\= (mod size 2) 0)" "(\= (mod (or size) 2) 0)" "(mainProg (getWorkingList))" "(+ player1 (mainAlg (getWorkingList)))" "(def size (getSize))" "(dec size)" "(println \\"player1 has\\" size)" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [l x, play1 player1, play2 player2 ,s size]\\n  (cond\\n    (<\= (or size) 1) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod (or size) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or size) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    true (recur (listReturned l), play1, play2, (dec s))))))" "(mainProg '(1 2 3 4))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [l x, play1 player1, play2 player2 ,s size]\\n  (cond\\n    (<\= (or size) 1) (println \\"Player1 has \\" player1, \\"Player2 has \\" player2)\\n    (\= (mod (or size) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or size) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s))))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n  (let [size (getSize)]\\n(loop [l x, play1 0, play2 0 ,s size]\\n  (cond\\n    (<\= (or size) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or size) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or size) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s))))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [l x, play1 0, play2 0 ,s size]\\n  (let [s (getSize)]\\n  (cond\\n    (<\= (or size) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or size) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or size) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s))))))" "(defn mainProg [x]\\n(loop [l x, play1 0, play2 0 ,s 0]\\n  (let [s (getSize)]\\n  (cond\\n    (<\= (or size) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or size) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or size) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s))))))" "(mainProg (getWorkingList))" "(mainProg (getWorkingList) size)" "(defn mainProg [x y]\\n(loop [l x, play1 0, play2 0 ,s y]\\n  (cond\\n    (<\= (or s) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or s) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or s) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s)))))" "(mainProg (getWorkingList) size)" "(defn testing [x]\\n  (loop [x]\\n    (cond\\n      (> x 1) (recur (dec x))\\n      \:else (println \\"done\\"))))" "(defn testing [xs]\\n  (loop [xs x]\\n    (cond\\n      (> x 1) (recur (dec x))\\n      \:else (println \\"done\\"))))" "(defn testing [y]\\n  (loop [y]\\n    (cond\\n      (> y 1) (recur (dec y))\\n      \:else (println \\"done\\"))))" "(defn testing [y]\\n  (loop [y t]\\n    (cond\\n      (> t 1) (recur (dec t))\\n      \:else (println \\"done\\"))))" "(defn testing [y]\\n  (loop [y]\\n    (cond\\n      (> y 1) (recur (dec y))\\n      \:else (println \\"done\\"))))" "(defn testing [y]\\n  (loop [x y]\\n    (cond\\n      (> y 1) (recur (dec y))\\n      \:else (println \\"done\\"))))" "(testing 10)" "(defn mainProg [x]\\n(loop [list x, play1 0, play2 0 ,s size]\\n  (cond\\n    (<\= (or s) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or s) 2) 0)    (recur (listReturned l) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or s) 2) 1)    (recur (listReturned l) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned l), play1, play2, (dec s)))))" "(defn mainProg [x]\\n(loop [list x, play1 0, play2 0 ,s size]\\n  (cond\\n    (<\= (or s) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or s) 2) 0)    (recur (listReturned list) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or s) 2) 1)    (recur (listReturned list) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned list), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(listReturned (getWorkingList))" "(mainAlg (getWorkingList))" "(defn mainProg [x p1 p2 size]\\n  (cond\\n    (<\= (or s) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or s) 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or s) 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s))))" "(defn mainProg [x play1 play2 s]\\n  (cond\\n    (<\= (or s) 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod (or s) 2) 0)    (recur (listReturned x) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod (or s) 2) 1)    (recur (listReturned x) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned x), play1, play2, (dec s))))" "(mainProg (getWorkingList) p1 p2 size)" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 p1, play2 p2 ,s size]\\n  (cond\\n    (<\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(mainProg (1 2 3 4 5 6))" "(mainProg '(1 2 3 4 5))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (<\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(\= (mod 10 2) 0)" "(def s 5)" "(>\= 1 s)" "(>\= s 5)" "(>\= s 3)" "(>\= s 6)" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= s 1) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ play1 (mainAlg x)) play2 (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a) play1 (+ play2 (mainAlg x)) (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a), (+ play1 (mainAlg x)), play2, (dec s))\\n    (\= (mod s 2) 1)    (recur (listReturned a), play1, (+ play2 (mainAlg x)), (dec s))\\n    \:else (recur (listReturned a), play1, play2, (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a), (+ play1 (mainAlg x)), play2, (dec s))\\n    \:else    (recur (listReturned a), play1, (+ play2 (mainAlg x)), (dec s)))))" "(mainProg (getWorkingList))" "s" "size" "(dec size)" "(+ p1 (mainalg (getWorkingList)))" "(+ p1 (mainAlg (getWorkingList)))" "(defn mainProg [x]\\n(loop [a x, play1 0, play2 0 ,s size]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a), (+ play1 (mainAlg x)), play2, (dec s))\\n    \:else    (recur (listReturned a), play1, (+ play2 (mainAlg x)), (dec s)))))" "(mainProg (getWorkingList))" "(defn mainProg [x y w z]\\n(loop [a x, play1 y, play2 w ,s z]\\n  (cond\\n    (>\= 1 s) (println \\"Player1 has \\" play1, \\"Player2 has \\" play2)\\n    (\= (mod s 2) 0)    (recur (listReturned a), (+ play1 (mainAlg x)), play2, (dec s))\\n    \:else    (recur (listReturned a), play1, (+ play2 (mainAlg x)), (dec s)))))" "(mainProg (getworkingList) p1 p2 (getSize))" "(mainProg (getW\\n            orkingList) p1 p2 (getSize))" "(mainProg (getWorkingList) p1 p2 (getSize))" "(mainProg (getWorkingList) p1 p2 size)" "p1" "size" "p2" "(getWorkingList)" "'(getWorkingList)" "(\= (mod s 2) 0)" "(def s 4)" "(\= (mod s 2) 0)" "(\= (mod s 2) 1)" "(mainProg (getWorkingList))" "(defn mainProg [x]\\n(loop [a x, p pone, q ptwo ,s size]\\n  (cond\\n    (>\= 2 s) (println \\"Player1 has \\" p, \\"Player2 has \\" q)\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ p (mainAlg x)) q (dec s))\\n    \:else    (recur (listReturned a) p (+ q (mainAlg x)) (dec s)))))" "(mainProg (getWorkingList))" "(def s 2)" "(\= 2 s)" "(and (\= 2 s) (\= 0 s)\\n     )" "(and (<\= 2 s) (not 0))" "s" "(and true true)" "s" "(and (>\= 2 s) (not 0))" "(and (<\= 2 s) (not\= 0))" "s" "(<\= 2 s)" "(and (<\= 2 s) (not\= s 0\\n                    ))" "(defn mainProg [x]\\n(loop [a x, p pone, q ptwo ,s size]\\n  (cond\\n    (\= 0 s) (println \\"Player1 has \\" p, \\"Player2 has \\" q)\\n    (and (<\= 2 s) (not\= s 0)) (recur a (+ (max (first a), (last a)) p) (+ (min (first a), (last a)) q)\\n                                     (dec (dec s)))\\n    (\= (mod s 2) 0)    (recur (listReturned a) (+ p (mainAlg x)) q (dec s))\\n    \:else    (recur (listReturned a) p (+ q (mainAlg x)) (dec s)))))" "(mainProg (getWorkingList))" "(def s 0)" "(and (<\= 2 s) (not\= s 0))" "(and (<\= 2 s) (not\= 0 s\\n                    ))" "(def s 2)" "(and (<\= 2 s) (not\= s 0))" "(def s 1)" "(and (<\= 2 s) (not\= s 0))" "(and (<\= s 2) (not\= s 0))" "s" "(mainProg (getWorkingList))" "(getWorkingList)" "(mainProg (getWorkingList))" "(def s 3)" "(\= (mod s 2) 0)" "(\= (mod s 2) 1)" "(mainProg (getWorkingList))" "(choice (getWorkingList))" "(choice (convertedList))" "(altChoice (convertedList))" "(mainProg (convertedList))" "(time (mainProg (convertedList)))"]
eclipse.preferences.version=1
